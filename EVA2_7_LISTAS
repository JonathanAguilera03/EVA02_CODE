import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jonathan Aguilera
 */
public class EVA2_7_LISTAS {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        ListasSim lista1=new ListasSim();
        /*lista1.printList();
        lista1.add(new Nodo(10));
        lista1.add(new Nodo(20));
        lista1.add(new Nodo(30));
        lista1.add(new Nodo(40));
        lista1.add(new Nodo(50));
        lista1.printList(); */
        for(int i=0;i<10;i++){
            lista1.add(new Nodo(30));
           // System.out.println("hay "+lista1.count()+" nodo(s)");
        }
        lista1.printList();
        try {
            lista1.insertAt(new Nodo(99999), 10);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println("");
        lista1.printList();
        System.out.println("");

        try {
            System.out.println("Valor en posicion 2: "+lista1.getValueAt(2));
        } catch (Exception ex) {
            Logger.getLogger(EVA2_7_LISTAS.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("");
        System.out.println("Buscamos 9999, y está en la posición: "+lista1.find(99999));
        System.out.println("Buscamos 30, y está en la posición: "+lista1.find(30));
        
        //BORRAR
        try {
            lista1.removeAt(10);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println("");
        lista1.printList();
        lista1.add(new Nodo(1111));
        System.out.println("");
        lista1.printList();
         /*
            if(lista1.isEmpty()){
            System.out.println("Lista vacia");
            }else
            System.out.println("Hay elementos en la lista");
            lista1.printList();
            try {
            lista1.insertAt(new Nodo(5), -7);
            } catch (Exception ex) {
            ex.printStackTrace();
            }*/
    }
    
}
//LOS COLLECTION EN JAVA (Y OTROS AMBIENTES) USAN DOS CLASES: UNA
//CLASE PARA LA ESTRUCTURA DE DATOS (LISTA, COLA, PILA, ETC.)
---------------------------------------------------------------------------------------------------------------------------------------
/**
 *
 * @author Jonathan Aguilera
 */
public class ListasSim {
    private Nodo nIni;//EL NODO QUE MARCA EL INICIO DE LA LISTA
    private Nodo nFin;
    private int contador;
    public ListasSim(){
        nIni=null;
        nFin=null;
        contador=0;
    }

    public ListasSim(Nodo nIni) {
        this.nIni = nIni;
        this.nFin = nIni;
        contador=1;
    }
    
    //AGREGAR UN NODO AL FINAL DE LA LISTA
    public void add(Nodo nNodo){
        if(nIni==null){//LA LISTA ESTÁ VACIA
            nIni=nNodo;
            nFin=nNodo;
        }else{//LA LISTA TIENE ELEMENTOS
            //HAY QUE MOVERNOS AL FINAL DE LA LISTA
            /*Nodo nTemp=nIni;
            while(nTemp.getSig()!=null){
                nTemp=nTemp.getSig();
            }
            //CONECTAR EL NUEVO NODO AL FINAL DE LA LISTA
            nTemp.setSig(nNodo); */
            nFin.setSig(nNodo);
            nFin=nNodo;
        }
        contador++;//CADA VEZ QUE AGREGAMOS UN NODO, INCREMENTAMOS 
    }
    //IMPRIMIR DATOS DE LA LISTA
    public void printList(){
        Nodo nTemp=nIni;
        while(nTemp!=null){
            System.out.print(nTemp.getMiDato()+" - ");
            nTemp=nTemp.getSig();
        }
    }
    //ELIMINAR TODOS LOS ELEMENTOS DE LA LISTA:
    public void clear(){
        nIni=null;
        nFin=null;
    }
    //DEVUELVE TRUE SI LA LISTA ESTÁ VACÍA
    public boolean isEmpty(){
        if(nIni!=null){
            return false;//SI HAY NODOS EN LA LISTA
        }else
            return true;//NO HAY NODOS EN LA LISTA
    }
    //CONTAR LOS ELEMENTOS EN LA LISTA
    public int count(){
        /*int contador=0;
            Nodo nTemp=nIni;
        while(nTemp!=null){
            contador++;
            nTemp=nTemp.getSig();
        }
        return contador;*/
        return contador;
    }
    //INSERTAR EN UNA POSICIÓN ESPECIFICA
    public void insertAt(Nodo nNodo, int pos) throws Exception{
        //ANALICEN LOS DIFERENTES CASOS
        if(pos<0){//LA PRIMER POSICION ES CERO
            throw new Exception("No se pueden insertar nodos en posiciones antes que el cero");
        }else if(pos>count()){//SI QUEREMOS INSERTAR MÁS ALLÁ DEL TAMAÑO DE LA LISTA
            throw new Exception("No se pueden insertar nodos en posiciones mayores al tamaño de la lista");
        }else if(pos==0){//SE QUIERE INSERTAR AL INICIO DE LA LISTA
            nNodo.setSig(nIni);//Nuevo.siguiente=nIni
            nIni=nNodo;
        }else{
            Nodo nTemp=nIni;
            for(int i=0;i<(pos-1);i++){
                nTemp=nTemp.getSig();
            }
            nNodo.setSig(nTemp.getSig());
            nTemp.setSig(nNodo);
        }
        contador++;
    }
    
    public int getValueAt(int pos) throws Exception{
        if(pos<0){//LA PRIMER POSICION ES CERO
            throw new Exception("No se pueden insertar nodos en posiciones antes que el cero");
        }else if(pos>count()){//SI QUEREMOS INSERTAR MÁS ALLÁ DEL TAMAÑO DE LA LISTA
            throw new Exception("No se pueden insertar nodos en posiciones mayores al tamaño de la lista");
        }
        Nodo nTemp=nIni;
        for(int i=0;i<pos;i++){
            nTemp=nTemp.getSig();
        }
        return nTemp.getMiDato();
    }
    //ENCONTRAR UN ELEMENTO (DEVOLVER SU POSICION)
    public int find(int val){
        int resul=-1;
        //BUSCAR EL ELEMENTO
        int pos=0;
        Nodo nTemp=nIni;
        while(nTemp!=null){
            if(nTemp.getMiDato()==val){
                resul=pos;
                break;
            }
            nTemp=nTemp.getSig();
            pos++;
        }
        return resul;
    }
    //ELIMINAR UN NODO EN UNA POSICIÓN
    public void removeAt(int pos) throws Exception{
        if(pos<0){//LA PRIMER POSICION ES CERO
            throw new Exception("No se pueden insertar nodos en posiciones antes que el cero");
        }else if(pos>count()){//SI QUEREMOS INSERTAR MÁS ALLÁ DEL TAMAÑO DE LA LISTA
            throw new Exception("No se pueden insertar nodos en posiciones mayores al tamaño de la lista");
        }else{//AQUÍ SI PUEDEN BORRAR
            //SI EL NODO A BORRAR ES EL CERO Y SOLOHAY UN NODO EN LA LISTA
            if((pos==0)&&(count()==1)){
                nIni=null;
                nFin=null;
            }
            Nodo nTemp=nIni;
            for(int i=0;i<(pos-1);i++){
            nTemp=nTemp.getSig();
            }
            nTemp.setSig(nTemp.getSig().getSig());
            if(nTemp.getSig()==null){//BORRAMOS EL ÚLTIMO NODO DE LA LISTA
                nFin=nTemp;
            }
            contador--;//SI BORRAMOS UN NODO, DECREMENTAMOS EL CONTEO
        }
    }
}
----------------------------------------------------------------------------------------------------

/**
 *
 * @author Jonathan Aguilera
 */
public class Nodo {
    //ATRIBUTOS: 1. DATO A ALMACENAR. 2. ENLACE AL SIG. O ANTERIOR NODO
    private int miDato;
    private Nodo sig;

    public Nodo() {
    }

    public Nodo(int miDato, Nodo sig) {
        this.miDato = miDato;
        this.sig = sig;
    }

    public Nodo(int miDato) {
        this.sig=null;
        this.miDato = miDato;
    }

    public int getMiDato() {
        return miDato;
    }

    public void setSig(Nodo sig) {
        this.sig = sig;
    }

    public Nodo getSig() {
        return sig;
    }

    public void setMiDato(int miDato) {
        this.miDato = miDato;
    }
    
    
}


